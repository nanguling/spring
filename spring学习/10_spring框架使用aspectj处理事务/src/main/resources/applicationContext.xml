<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--声明参数配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--声明数据源-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.un}"/>
        <property name="password" value="${jdbc.pw}"/>
        <property name="maxActive" value="${jdbc.max}"/>
    </bean>

    <!--声明SqlSessionFactory对象，使用SqlSessionFactoryBean类创建-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--通过set注入将数据源赋值给dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!--声明mybatis主配置文件位置
            configLocation属性是Resource类型的
           它的赋值使用value，指定配置文件路径使用classpath：表示文件位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--创建dao代理对象，使用MapperScannerConfigurer类在其内部创建-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定dao接口所在的包，MapperScannerConfigurer会为该包下的所有接口执行getMapper()方法，创建出他们的代理对象-->
        <property name="basePackage" value="com.mystudy.dao"/>
    </bean>

    <!--声明service对象-->
    <context:component-scan base-package="com.mystudy.service.impl"/>

    <!--声明式事务处理：和源代码完全分离的-->
    <!--1.声明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--2.声明业务方法它的事务属性（隔离级别，传播行为，超时时间）
          id：自定义名称，表示<tx:advice>和</tx:advice>之间的配置内容
          transaction-manager：事务管理器对象的id
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <!--tx:attributes表示配置事务属性-->
        <tx:attributes>
            <!--tx:method表示给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性
                name：方法名称 1.完整方法名，不带包和类
                             2.方法可以使用通配符，*表示任意字符
                propagation：传播行为，枚举值
                isolation：隔离级别
                rollback-for：指定的异常类名，全限定类名。发生异常一定回滚
            -->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException,com.mystudy.exception.NotEnoughException"/>
            <!--使用通配符指定多个方法-->
            <tx:method name="add*" propagation="REQUIRES_NEW"/>
            <!--指定修改方法-->
            <tx:method name="modify*"/>
            <!--删除方法-->
            <tx:method name="remove*"/>
            <!--查询方法，query，search，find-->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中类要使用方法
            id：切入点表达式的名称，唯一值
            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>

        <!--配置增强器：关联advice和pointcut
            advice-ref：通知，上面tx:advice的配置
            pointcut-ref：上面切入点表达式id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>